{"ast":null,"code":"import api from './api';\nconst notificationService = {\n  // ===== USER NOTIFICATIONS =====\n\n  /**\n   * Get current user's notifications\n   */\n  getMyNotifications: async (params = {}) => {\n    const {\n      skip = 0,\n      limit = 50,\n      unread_only = false\n    } = params;\n    const response = await api.get('/api/users/notifications/me', {\n      params: {\n        skip,\n        limit,\n        unread_only\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Mark a notification as read\n   */\n  markAsRead: async notificationId => {\n    const response = await api.patch(`/api/users/notifications/${notificationId}/read`);\n    return response.data;\n  },\n  /**\n   * Mark all notifications as read\n   */\n  markAllAsRead: async () => {\n    const response = await api.post('/api/users/notifications/mark-all-read');\n    return response.data;\n  },\n  /**\n   * Delete a notification\n   */\n  deleteNotification: async notificationId => {\n    const response = await api.delete(`/api/users/notifications/${notificationId}`);\n    return response.data;\n  },\n  // ===== ADMIN NOTIFICATIONS =====\n\n  /**\n   * Send notification to a specific user (Admin only)\n   */\n  sendNotificationToUser: async (userId, notificationData, sendTelegram = true) => {\n    const response = await api.post(`/api/admin/users/${userId}/notify`, notificationData, {\n      params: {\n        send_telegram: sendTelegram\n      }\n    });\n    return response.data;\n  },\n  /**\n   * Broadcast notification to multiple users (Admin only)\n   */\n  broadcastNotification: async broadcastData => {\n    const response = await api.post('/api/admin/notifications/broadcast', broadcastData);\n    return response.data;\n  },\n  /**\n   * Get notifications for a specific user (Admin view)\n   */\n  getUserNotifications: async (userId, params = {}) => {\n    const {\n      skip = 0,\n      limit = 50\n    } = params;\n    const response = await api.get(`/api/admin/users/${userId}/notifications`, {\n      params: {\n        skip,\n        limit\n      }\n    });\n    return response.data;\n  },\n  // ===== NOTIFICATION TEMPLATES =====\n\n  /**\n   * Get all notification templates (Admin only)\n   */\n  getTemplates: async () => {\n    const response = await api.get('/api/admin/notification-templates');\n    return response.data;\n  },\n  /**\n   * Create a new notification template (Admin only)\n   */\n  createTemplate: async templateData => {\n    const response = await api.post('/api/admin/notification-templates', templateData);\n    return response.data;\n  },\n  /**\n   * Delete a notification template (Admin only)\n   */\n  deleteTemplate: async templateId => {\n    const response = await api.delete(`/api/admin/notification-templates/${templateId}`);\n    return response.data;\n  }\n};\nexport default notificationService;","map":{"version":3,"names":["api","notificationService","getMyNotifications","params","skip","limit","unread_only","response","get","data","markAsRead","notificationId","patch","markAllAsRead","post","deleteNotification","delete","sendNotificationToUser","userId","notificationData","sendTelegram","send_telegram","broadcastNotification","broadcastData","getUserNotifications","getTemplates","createTemplate","templateData","deleteTemplate","templateId"],"sources":["C:/Users/thuyd/Downloads/1/code2_COMPLETELY_FIXED/frontend/src/services/notificationService.js"],"sourcesContent":["import api from './api';\n\nconst notificationService = {\n  // ===== USER NOTIFICATIONS =====\n  \n  /**\n   * Get current user's notifications\n   */\n  getMyNotifications: async (params = {}) => {\n    const { skip = 0, limit = 50, unread_only = false } = params;\n    const response = await api.get('/api/users/notifications/me', {\n      params: { skip, limit, unread_only }\n    });\n    return response.data;\n  },\n  \n  /**\n   * Mark a notification as read\n   */\n  markAsRead: async (notificationId) => {\n    const response = await api.patch(`/api/users/notifications/${notificationId}/read`);\n    return response.data;\n  },\n  \n  /**\n   * Mark all notifications as read\n   */\n  markAllAsRead: async () => {\n    const response = await api.post('/api/users/notifications/mark-all-read');\n    return response.data;\n  },\n  \n  /**\n   * Delete a notification\n   */\n  deleteNotification: async (notificationId) => {\n    const response = await api.delete(`/api/users/notifications/${notificationId}`);\n    return response.data;\n  },\n  \n  // ===== ADMIN NOTIFICATIONS =====\n  \n  /**\n   * Send notification to a specific user (Admin only)\n   */\n  sendNotificationToUser: async (userId, notificationData, sendTelegram = true) => {\n    const response = await api.post(\n      `/api/admin/users/${userId}/notify`,\n      notificationData,\n      { params: { send_telegram: sendTelegram } }\n    );\n    return response.data;\n  },\n  \n  /**\n   * Broadcast notification to multiple users (Admin only)\n   */\n  broadcastNotification: async (broadcastData) => {\n    const response = await api.post('/api/admin/notifications/broadcast', broadcastData);\n    return response.data;\n  },\n  \n  /**\n   * Get notifications for a specific user (Admin view)\n   */\n  getUserNotifications: async (userId, params = {}) => {\n    const { skip = 0, limit = 50 } = params;\n    const response = await api.get(`/api/admin/users/${userId}/notifications`, {\n      params: { skip, limit }\n    });\n    return response.data;\n  },\n  \n  // ===== NOTIFICATION TEMPLATES =====\n  \n  /**\n   * Get all notification templates (Admin only)\n   */\n  getTemplates: async () => {\n    const response = await api.get('/api/admin/notification-templates');\n    return response.data;\n  },\n  \n  /**\n   * Create a new notification template (Admin only)\n   */\n  createTemplate: async (templateData) => {\n    const response = await api.post('/api/admin/notification-templates', templateData);\n    return response.data;\n  },\n  \n  /**\n   * Delete a notification template (Admin only)\n   */\n  deleteTemplate: async (templateId) => {\n    const response = await api.delete(`/api/admin/notification-templates/${templateId}`);\n    return response.data;\n  }\n};\n\nexport default notificationService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}